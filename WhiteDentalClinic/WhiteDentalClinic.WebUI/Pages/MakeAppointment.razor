@page "/makeappointment";
@inject HttpClient Http
@using Syncfusion.Blazor.Calendars
@using System.ComponentModel.DataAnnotations;
@using WhiteDentalClinic.Application.Models;
@using static WhiteDentalClinic.WebUI.Pages.Dentists;


<h2>MakeAppointment</h2>
<h5>Select date and time for your appointment:</h5>

@*Add Placeholder="Choose a Date Range" in below code when no value is set to DateTimePicker*@
<Syncfusion.Blazor.Calendars.SfDateTimePicker TValue="DateTime?" Min='@MinDate' Max='@MaxDate' Value='@DateValue' StrictMode=true>
</Syncfusion.Blazor.Calendars.SfDateTimePicker>


<EditForm class="d-flex flex-column align-items-left" Model="@newAppointment.DentistId" OnSubmit="@HandleValidSubmit">
    <div class="m-2">
        <label for="id">Dentist: </label>
        <InputSelect id="id" @bind-Value="@newAppointment.DentistId">
            @foreach (var id in dentists)
            {
                <option value="@id">@id</option>
            }
        </InputSelect>
    </div>

   <button type="submit" class="btn btn-primary">Create appointment</button>

</EditForm>


@code {
    private List<DentistResponseModel> dentists = new List<DentistResponseModel>();

    protected override async Task OnInitializedAsync()
    {
        var temp = await Http.GetFromJsonAsync<ApiResult<IEnumerable<DentistResponseModel>>>("api/Dentists/all");
        dentists = temp.Result.ToList();
    }

    private readonly CreateAppointmentRequestModel newAppointment = new CreateAppointmentRequestModel
        {
            dateTime = DateTime.MaxValue,
            CustomerId = Guid.Parse("6792ebb3-1092-4350-8257-18b5c8d2fae8"),                //here will take ID from currem customer
            //DentistId = Guid.Parse("87459b92-79d6-44b3-850e-727d90519ba3")                  //here will take dentist's ID who was selected by previous customer
        };

    private string response = string.Empty;

    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Today.AddDays(1).Day, 02, 00, 00);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Today.AddYears(2).Year, DateTime.Now.Month, 25, 02, 00, 00);
    public DateTime? DateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 28, 02, 00, 00);

    public class CreateAppointmentRequestModel
    {
        public Guid Id = Guid.NewGuid();
        [Required(ErrorMessage = "Please select again the date and time.")]
        public DateTime dateTime { get; set; }
        public Guid CustomerId { get; set; }
        public Guid DentistId { get; set; }
    }
    public async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/api/Appointment/create", newAppointment);

        this.response = await response.Content.ReadAsStringAsync();
    }

}