@page "/makeappointment";
@inject HttpClient Http
@using Syncfusion.Blazor.Calendars
@using System.ComponentModel.DataAnnotations;
@using WhiteDentalClinic.Application.Models;
@using static WhiteDentalClinic.WebUI.Pages.Dentists;
@using System.Text.Json;


<h2>MakeAppointment</h2>
<h5>Select date and time for your appointment:</h5>
<br />
@*Add Placeholder="Choose a Date Range" in below code when no value is set to DateTimePicker*@



<EditForm class="d-flex flex-column align-items-left" Model="@newAppointment" OnSubmit="@HandleValidSubmit">

    <Syncfusion.Blazor.Calendars.SfDateTimePicker TValue="DateTime?" Min='@MinDate' Max='@MaxDate' Value='@DateValue' OnClose="OnCloseHandler"
                                                  StrictMode=true Placeholder="Select a date and time" Format="dd-MM-yyyy HH:mm">
    </Syncfusion.Blazor.Calendars.SfDateTimePicker>

    <div class="m-2">
        <label for="id" class="col-sm-2 col-form-label">Dentist: </label>
        <div class="col-sm-10">
            <InputSelect class="form-select" id="id" @bind-Value="@newAppointment.DentistId">
                @foreach (var dentist in dentists)
                {
                    <option value="@newAppointment.DentistId">@dentist.FirstName @dentist.LastName</option>
                }
            </InputSelect>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Create appointment</button>

</EditForm>

<h4> Your appointment is: @response</h4>

@code {
    private List<DentistResponseModel> dentists = new List<DentistResponseModel>();

    protected override async Task OnInitializedAsync()
    {
        var temp = await Http.GetFromJsonAsync<ApiResult<IEnumerable<DentistResponseModel>>>("api/Dentists/all");
        dentists = temp.Result.ToList();
    }

    private CreateAppointmentRequestModel newAppointment = new CreateAppointmentRequestModel
        {
            //dateTime = DateValue,
            CustomerId = Guid.Parse("c210cc12-7484-41b9-96da-834d2faf3aa2"),                //here will take ID from current customer
           //DentistId = Guid.Parse("87459b92-79d6-44b3-850e-727d90519ba3")                  //here will take dentist's ID who was selected by previous customer
        };

    private string response = string.Empty;

    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Today.AddDays(1).Day, 02, 00, 00);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Today.AddYears(2).Year, DateTime.Now.Month, 25, 02, 00, 00);
    public DateTime? DateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 10);

    public void TakeDentistId()
    {
        this.newAppointment.dateTime = DateValue;
    }

    public class CreateAppointmentRequestModel
    {
        public Guid Id = Guid.NewGuid();
        [Required(ErrorMessage = "Please select again the date and time.")]
        public DateTime? dateTime { get; set; }
        public Guid CustomerId { get; set; }
        public Guid DentistId { get; set; }
    }

    public async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/api/Appointment/create", newAppointment);

        this.response = await response.Content.ReadAsStringAsync();
    }
}