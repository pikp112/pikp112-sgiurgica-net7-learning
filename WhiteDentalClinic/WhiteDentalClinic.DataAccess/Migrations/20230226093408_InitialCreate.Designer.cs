// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiteDentalClinic.DataAccess;

#nullable disable

namespace WhiteDentalClinic.DataAccess.Migrations
{
    [DbContext(typeof(ApiDbTempContext))]
    [Migration("20230226093408_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.AppointmentEntity.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.CustomerDentistEntity.CustomerDentist", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId", "DentistId");

                    b.HasIndex("DentistId");

                    b.ToTable("CustomerDentists");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.CustomerEntity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.DentistEntity.Dentist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.MedicalServiceEntity.MedicalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalServices");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.AppointmentEntity.Appointment", b =>
                {
                    b.HasOne("WhiteDentalClinic.DataAccess.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.CustomerDentistEntity.CustomerDentist", b =>
                {
                    b.HasOne("WhiteDentalClinic.DataAccess.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Dentists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteDentalClinic.DataAccess.Entities.DentistEntity.Dentist", "Dentist")
                        .WithMany("Customers")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Dentist");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.DentistEntity.Dentist", b =>
                {
                    b.HasOne("WhiteDentalClinic.DataAccess.Entities.MedicalServiceEntity.MedicalService", "MedicalService")
                        .WithMany("Dentists")
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalService");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.CustomerEntity.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Dentists");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.DentistEntity.Dentist", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("WhiteDentalClinic.DataAccess.Entities.MedicalServiceEntity.MedicalService", b =>
                {
                    b.Navigation("Dentists");
                });
#pragma warning restore 612, 618
        }
    }
}
